{
    "sourceFile": "src/main/java/com/vincent/inc/Saturday/util/JwtTokenUtil.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1689363918875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1689363918875,
            "name": "Commit-0",
            "content": "package com.vincent.inc.Saturday.util;\r\n\r\nimport java.io.Serializable;\r\n\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.function.Function;\r\n\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport io.jsonwebtoken.Claims;\r\nimport io.jsonwebtoken.Jwts;\r\nimport io.jsonwebtoken.SignatureAlgorithm;\r\nimport vincentcorp.vshop.Authenticator.model.User;\r\n\r\n@Component\r\npublic class JwtTokenUtil implements Serializable\r\n{\r\n    private static final long serialVersionUID = -2550185165626007488L;\r\n\r\n\tpublic static final long JWT_TOKEN_VALIDITY = 5 * 60 * 60;\r\n\r\n\t@Value(\"${jwt.secret}\")\r\n\tprivate String secret;\r\n\r\n\t//retrieve username from jwt token\r\n\tpublic String getUsernameFromToken(String token) {\r\n\t\treturn getClaimFromToken(token, Claims::getSubject);\r\n\t}\r\n\r\n\t//retrieve username from jwt token\r\n\tpublic String getPwdFromToken(String token) {\r\n\t\treturn getClaimFromToken(token, (c) -> c.get(\"pwd\").toString());\r\n\t}\r\n\r\n\t//retrieve expiration date from jwt token\r\n\tpublic Date getExpirationDateFromToken(String token) {\r\n\t\treturn getClaimFromToken(token, Claims::getExpiration);\r\n\t}\r\n\r\n\tpublic <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {\r\n\t\tfinal Claims claims = getAllClaimsFromToken(token);\r\n\t\treturn claimsResolver.apply(claims);\r\n\t}\r\n    //for retrieving any information from token we will need the secret key\r\n\tprivate Claims getAllClaimsFromToken(String token) {\r\n\t\treturn Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();\r\n\t}\r\n\r\n\t//check if the token has expired\r\n\tpublic Boolean isTokenExpired(String token) {\r\n\t\tfinal Date expiration = getExpirationDateFromToken(token);\r\n\t\treturn expiration.before(new Date());\r\n\t}\r\n\r\n\t//generate token for user\r\n\tpublic String generateToken(User user) {\r\n\t\tMap<String, Object> claims = new HashMap<>();\r\n\t\treturn doGenerateToken(claims, user);\r\n\t}\r\n\r\n\t@Deprecated\r\n\t//while creating the token -\r\n\t//1. Define  claims of the token, like Issuer, Expiration, Subject, and the ID\r\n\t//2. Sign the JWT using the HS512 algorithm and secret key.\r\n\t//3. According to JWS Compact Serialization(https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#section-3.1)\r\n\t//   compaction of the JWT to a URL-safe string \r\n\tpublic String doGenerateToken(Map<String, Object> claims, String subject) {\r\n\t\treturn Jwts.builder()\r\n\t\t\t\t.setClaims(claims)\r\n\t\t\t\t.setSubject(subject)\r\n\t\t\t\t.setIssuedAt(new Date(System.currentTimeMillis()))\r\n\t\t\t\t// .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))\r\n\t\t\t\t.signWith(SignatureAlgorithm.HS512, secret).compact();\r\n\t}\r\n\r\n\tprivate String doGenerateToken(Map<String, Object> claims, User user) {\r\n\t\tclaims.put(\"pwd\", user.getPassword());\r\n\t\treturn Jwts.builder()\r\n\t\t\t\t.setClaims(claims)\r\n\t\t\t\t.setSubject(user.getUsername())\r\n\t\t\t\t.setIssuedAt(new Date(System.currentTimeMillis()))\r\n\t\t\t\t// .setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000))\r\n\t\t\t\t.signWith(SignatureAlgorithm.HS512, secret).compact();\r\n\t}\r\n\r\n\t//validate token\r\n\tpublic Boolean validateToken(String token, User user) {\r\n\t\tfinal String username = getUsernameFromToken(token);\r\n\t\treturn (username.equals(user.getUsername()) && !isTokenExpired(token));\r\n\t}\r\n}\r\n"
        }
    ]
}