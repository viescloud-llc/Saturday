{
    "sourceFile": "src/main/java/com/vincent/inc/Saturday/util/DatabaseUtils.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1689363922777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1689363922777,
            "name": "Commit-0",
            "content": "package com.vincent.inc.Saturday.util;\r\n\r\nimport java.time.Duration;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Scope;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.redis.connection.RedisStandaloneConfiguration;\r\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.util.ObjectUtils;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\n@Service\r\n@Scope(\"prototype\")\r\n@Slf4j\r\npublic class DatabaseUtils<V, K> {\r\n\r\n    @Getter\r\n    @Setter\r\n    private Time TTL = new Time(0, 0, 0, 0, 10, 0, true);\r\n\r\n    private String hashes = String.format(\"%s.%s\", this.getClass().getName(), \"default\");\r\n\r\n    @Autowired\r\n    private RedisTemplate<String, V> redisTemplate;\r\n\r\n    @Getter\r\n    private JpaRepository<V, K> jpaRepository;\r\n\r\n    public DatabaseUtils<V, K> init(JpaRepository<V, K> jpaRepository, String hashes) {\r\n        this.jpaRepository = jpaRepository;\r\n        this.hashes = hashes;\r\n        return this;\r\n    }\r\n\r\n    public V get(K key) {\r\n        try {\r\n            String hashKey = String.format(\"%s.%s\", this.hashes, key);\r\n            V value = this.redisTemplate.opsForValue().get(hashKey);\r\n\r\n            if (ObjectUtils.isEmpty(value) && !ObjectUtils.isEmpty(this.jpaRepository)) {\r\n                value = null;\r\n                var oValue = this.jpaRepository.findById(key);\r\n                if (oValue.isPresent()) {\r\n                    value = oValue.get();\r\n                    this.save(key, value);\r\n                    return value;\r\n                }\r\n            }\r\n\r\n            return value;\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public V getAndExpire(K key) {\r\n        String hashKey = String.format(\"%s.%s\", this.hashes, key);\r\n        var value = this.get(key);\r\n        if (!ObjectUtils.isEmpty(value))\r\n            this.redisTemplate.expire(hashKey, getTTLDuration());\r\n\r\n        return value;\r\n    }\r\n\r\n    public V save(K key, V value) {\r\n        try {\r\n            var hashKey = String.format(\"%s.%s\", this.hashes, key);\r\n\r\n            if (!ObjectUtils.isEmpty(this.jpaRepository)) {\r\n                value = jpaRepository.save(value);\r\n            }\r\n\r\n            this.redisTemplate.opsForValue().set(hashKey, value);\r\n\r\n            return value;\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public V save(V value) {\r\n        try {\r\n            if (!ObjectUtils.isEmpty(this.jpaRepository))\r\n                value = jpaRepository.save(value);\r\n\r\n            var id = ReflectionUtils.getIdFieldValue(value);\r\n\r\n            if (ObjectUtils.isEmpty(id))\r\n                return value;\r\n\r\n            var hashKey = String.format(\"%s.%s\", this.hashes, id);\r\n            this.redisTemplate.opsForValue().set(hashKey, value);\r\n\r\n            return value;\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public V saveAndExpire(K key, V value) {\r\n        try {\r\n            var hashKey = String.format(\"%s.%s\", this.hashes, key);\r\n            var saveValue = this.save(key, value);\r\n            this.redisTemplate.expire(hashKey, getTTLDuration());\r\n\r\n            return saveValue;\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public V saveAndExpire(V value) {\r\n        try {\r\n            var id = ReflectionUtils.getIdFieldValue(value);\r\n            var saveValue = this.save(value);\r\n            \r\n            if (ObjectUtils.isEmpty(id))\r\n                return null;\r\n\r\n            var hashKey = String.format(\"%s.%s\", this.hashes, id);\r\n            this.redisTemplate.expire(hashKey, getTTLDuration());\r\n\r\n            return saveValue;\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public void deleteById(K key) {\r\n        try {\r\n            var hashKey = String.format(\"%s.%s\", this.hashes, key);\r\n\r\n            if (!ObjectUtils.isEmpty(this.jpaRepository))\r\n                this.jpaRepository.deleteById(key);\r\n\r\n            this.redisTemplate.delete(hashKey);\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n        }\r\n    }\r\n\r\n    public void delete(V value) {\r\n        try {\r\n            var id = ReflectionUtils.getIdFieldValue(value);\r\n            var hashKey = String.format(\"%s.%s\", this.hashes, id);\r\n\r\n            if (!ObjectUtils.isEmpty(this.jpaRepository))\r\n                this.jpaRepository.delete(value);\r\n\r\n            if (!ObjectUtils.isEmpty(id))\r\n                this.redisTemplate.delete(hashKey);\r\n        } catch (Exception ex) {\r\n            log.error(ex.getMessage(), ex);\r\n        }\r\n    }\r\n\r\n    @Bean\r\n    public static JedisConnectionFactory connectionFactory(@Value(\"${spring.data.redis.host}\") String redisHost,\r\n            @Value(\"${spring.data.redis.port}\") int redisPort) {\r\n        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\r\n        configuration.setHostName(redisHost);\r\n        configuration.setPort(redisPort);\r\n        return new JedisConnectionFactory(configuration);\r\n    }\r\n\r\n    @Bean\r\n    @Autowired\r\n    public static RedisTemplate<String, Object> redisTemplate(JedisConnectionFactory jedisConnectionFactory) {\r\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\r\n        redisTemplate.setConnectionFactory(jedisConnectionFactory);\r\n        // redisTemplate.setHashKeySerializer(new StringRedisSerializer());\r\n        // redisTemplate.setHashKeySerializer(new JdkSerializationRedisSerializer());\r\n        // redisTemplate.setHashValueSerializer(new JdkSerializationRedisSerializer());\r\n        // redisTemplate.setKeySerializer(new StringRedisSerializer());\r\n        // redisTemplate.setValueSerializer(new JdkSerializationRedisSerializer());\r\n        // redisTemplate.setEnableTransactionSupport(true);\r\n        // redisTemplate.afterPropertiesSet();\r\n        return redisTemplate;\r\n    }\r\n\r\n    private Duration getTTLDuration() {\r\n        return Duration.ofSeconds(this.TTL.sumSeconds());\r\n    }\r\n}\r\n"
        }
    ]
}